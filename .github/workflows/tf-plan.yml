name: terraform-plan

on: push

env:
  TF_VERSION: 0.14
jobs:
  terraform-plan:
    strategy:
      fail-fast: false
      matrix:
        workspace: [st-test-results-bucket_ap-southeast-2]
        # pd-test-results-bucket_ap-southeast-2]

    name: ${{ matrix.workspace }}
    runs-on: ubuntu-latest

    env:
      WORKSPACE: ${{ matrix.workspace }}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID_STAGING}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY_STAGING}}

    steps:
      - name: Generate tfvars Path
        id: tfvars
        run: |
          if [[ "${WORKSPACE}" == "st"* ]]; then
            echo "::set-output name=tfvars_file::tfvars/staging/${WORKSPACE}.tfvars"
          elif [[ "${WORKSPACE}" == "pd"* ]]; then
            echo "::set-output name=tfvars_file::tfvars/production/${WORKSPACE}.tfvars"
          else
            echo "::set-output name=tfvars_file::UNKNOWN"
          fi

      - name: Checkout
        uses: actions/checkout@1.0.0


      # - name: Setup AWS Credentials
      #   run: |
      #     # Setup the credentials in the workspace because everything in terraform is
      #     # driven off profiles
      #     mkdir -p .aws
      #
      #     echo "[staging]" > .aws/credentials
      #     echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}" >> .aws/credentials
      #     echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}" >> .aws/credentials
      #
      #     # Production is needed because all of the TF state is stored in prod S3
      #     echo "[production]" >> .aws/credentials
      #     echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}" >> .aws/credentials
      #     echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}" >> .aws/credentials

      - uses: hashicorp/setup-terraform@v1

      # - name: display contents
      #   run: 'ls -la'

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt


      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event_name == 'push'
        run: terraform plan -var-file=${{ steps.tfvars.outputs.tfvars_file }}
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -var-file=${{ steps.tfvars.outputs.tfvars_file }} -auto-approve
